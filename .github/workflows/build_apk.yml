name: Build APK (Beta)

on:
    workflow_dispatch:  # Allow manual triggering
    push:
        branches:
            - master
        paths-ignore:
            - 'fastlane/**'
            - 'scripts/**'
            - '.idea/**'
            - '.github/**'
            - 'assets/**'
            - '*.md'
            - '*.yml'

jobs:

    build:
        # Skip if head commit contains 'skip build apk'
        if: "!contains(github.event.head_commit.message, 'skip build apk')"
        name: Build APK
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up JDK
                uses: actions/setup-java@v3
                with:
                    distribution: 'temurin'
                    java-version: '17'
                    cache: 'gradle'

            -   name: Decode Keystore
                id: decode_keystore
                uses: timheuer/base64-to-file@v1
                with:
                    fileName: 'keystore/key.jks'
                    encodedString: ${{ secrets.SIGN_KEY }}

            #      - name: Set up Android
            #        uses: actions/setup-android@v2
            #        with:
            #          sdk-platform: 34   # Specify the desired Android SDK platform version
            #          ndk-version: '25.2.9519653'  # Specify the desired NDK version

            -   name: Build APK
                run: | # Use 'bundleRelease' to build the release bundle
                    chmod +x ./gradlew
                    ./gradlew clean assembleBetaRelease
                env:
                    SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
                    SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
                    SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}

            -   name: Send APKs to Telegram
                run: |
                    TELEGRAM_API_KEY="${{ secrets.TG_BOT_KEY }}"
                    CHANNEL_ID="@inure_app_manager"  # Replace with your channel ID or username
                    
                    # Prepare the message text
                    message="New Beta APK build is ready, test it and report any bugs or issue you had found in the group!"
                    
                    # Create an array to store the APK file paths
                    apk_files=()
                    
                    # Find all APK files using the specified pattern and add them to the array
                    while IFS= read -r -d '' apk_file; do
                      apk_files+=("$apk_file")
                    done < <(find app/ -name "*.apk" -print0)
                    
                    # Send the message with all APK files as documents
                    response=$(curl -F chat_id="${CHANNEL_ID}" -F text="${message}" "${apk_files[@]/#/-F document=@}" "https://api.telegram.org/bot${TELEGRAM_API_KEY}/sendDocument")
                    
                    # Log the response for debugging
                    echo "Telegram API Response: $response"
                    
                    # Check for errors in the response
                    if [[ "$response" == *"\"ok\":false"* ]]; then
                      echo "Sending APK files failed. Check the response for details."
                      exit 1  # This will cause the workflow to fail if there is an error
                    fi
                env:
                    TELEGRAM_API_KEY: ${{ secrets.TELEGRAM_API_KEY }}

            -   name: Archive APK
                uses: actions/upload-artifact@v3
                with:
                    name: Beta APK (Debug)
                    path: app/**/*.apk

