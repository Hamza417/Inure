name: Build Temporary Release APK

on:
    workflow_dispatch:  # Allow manual triggering

jobs:
    build:
        name: Build Release APK
        runs-on: ubuntu-latest

        steps:
            -   name: Prepare Android SDK Directory
                run: |
                    sudo mkdir -p /opt/sdk
                    sudo chown -R $USER:$USER /opt/sdk

            -   name: Install Android Command Line Tools (Latest)
                run: |
                    wget $(curl -s https://developer.android.com/studio | grep -oP 'https://dl.google.com/android/repository/commandlinetools-linux-\d+_latest.zip') -O cmdline-tools.zip
                    mkdir -p /opt/sdk/cmdline-tools/latest
                    unzip cmdline-tools.zip -d /opt/sdk/cmdline-tools/latest
                    mv /opt/sdk/cmdline-tools/latest/cmdline-tools/* /opt/sdk/cmdline-tools/latest/
                    rm -rf /opt/sdk/cmdline-tools/latest/cmdline-tools
                    echo "export PATH=/opt/sdk/cmdline-tools/latest/bin:$PATH" >> ~/.bashrc
                    echo "export PATH=/opt/sdk/cmdline-tools/latest/bin:$PATH" >> ~/.profile
                    export PATH=/opt/sdk/cmdline-tools/latest/bin:$PATH
                    sdkmanager --version  # Verify that sdkmanager is available

            -   name: Accept Android SDK Licenses
                run: yes | /opt/sdk/cmdline-tools/latest/bin/sdkmanager --licenses

            -   name: Set Android SDK Environment Variables
                env:
                    ANDROID_HOME: /opt/sdk
                    ANDROID_SDK_ROOT: /opt/sdk
                    ANDROID_SDK_HOME: /opt/sdk
                    PATH: /opt/sdk/cmdline-tools/latest/bin:$PATH
                run: echo "Using Android SDK at $ANDROID_HOME"

            -   name: Configure Android SDK in local.properties
                run: |
                    echo "sdk.dir=/opt/sdk" > local.properties

            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Java and Android SDK
                uses: actions/setup-java@v4
                with:
                    java-version: '21' # Adjust the Java version as needed
                    distribution: 'temurin'

            -   name: Decode Keystore
                id: decode_keystore
                uses: timheuer/base64-to-file@v1
                with:
                    fileName: 'keystore/key.jks'
                    encodedString: ${{ secrets.SIGN_KEY }}

            -   name: Build GitHub Release APK
                run: |
                    chmod +x ./gradlew
                    ./gradlew clean assembleGithubRelease --no-build-cache --rerun-tasks
                env:
                    SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
                    SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
                    SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}

            -   name: Extract Version Name and Version Code
                run: |
                    # Extract versionName and versionCode from build.gradle
                    VERSION_NAME=$(cat app/build.gradle | grep -oP 'versionName "\K[^"]*')
                    VERSION_CODE=$(cat app/build.gradle | grep -oP 'versionCode \K\d+')
                    
                    # Make the version name sentence case
                    VERSION_NAME=$(echo "$VERSION_NAME" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1')
                    
                    echo "Version Name: $VERSION_NAME"
                    echo "Version Code: $VERSION_CODE"
                    
                    # Set these values as environment variables for later steps
                    echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
                    echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV

            -   name: Archive APKs
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ env.VERSION_NAME }}
                    path: |
                        app/**/github/release/*.apk
